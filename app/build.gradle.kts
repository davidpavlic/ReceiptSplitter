/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("org.openjfx.javafxplugin") version "0.1.0"
}

repositories {
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter & Mockito for testing.
    testImplementation(libs.junit.jupiter)
    testImplementation(libs.mockito)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
    implementation(libs.java.ocr.tesseract)
    implementation(libs.simple.java.mail)
    implementation(libs.mail.batch.modules)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

javafx {
    version = "21.0.2"
    modules("javafx.controls", "javafx.fxml")
}

// Set Env var for API Key used for Authentication with SMTP Server
val smtpApiKey: String? = if (hasProperty("SMTP_API_KEY")) findProperty("SMTP_API_KEY") as String else null
val smtpUsername: String? = if (hasProperty("SMTP_USERNAME")) findProperty("SMTP_USERNAME") as String else null

application {
    // Define the main class for the application.
    mainClass = "ch.zhaw.it.pm2.receiptsplitter.Main"
    applicationDefaultJvmArgs = listOf("-DSMTP_API_KEY=${smtpApiKey}", "-DSMTP_USERNAME=${smtpUsername}")
}

//TODO Force to reload contacts.csv file

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
